#working code snippet for the prompt_style and context_source toggles, 
#written in plain Python with inline comments so it‚Äôs easy to follow.

1. Setup: Your Config Settings
# config.py

config = {
    "prompt_style": "structured",    # Options: "structured", "natural"
    "context_source": "static"       # Options: "static", "file"
}

2. Dummy Inputs for Testing
# input values
user_inputs = {
    "role": "Study Director",
    "goal": "lock a document",
    "benefit": "ensure data integrity",
    "featureName": "Document Locking"
}

raw_input = "Study Director needs to lock a document so no one else can edit it"

3. Static Context Option
# For context_source = "static"
static_context = """
The Study Director uses the Document Center and eSign Workflow.
Their priorities include traceability and compliance. Actions must be audit-logged.
"""

4. Context From File Option
# For context_source = "file"
def read_context_from_file(filepath):
    try:
        with open(filepath, 'r') as f:
            return f.read()
    except FileNotFoundError:
        return "Context file not found. Please upload or check the path."

5. Prompt Generators
# Structured prompt (Enterprise style)
def construct_story_prompt(inputs, context):
    return f"""
You are a senior CRL Product Owner.

Write a user story based on:
- Role: {inputs['role']}
- Goal: {inputs['goal']}
- Benefit: {inputs['benefit']}
- Feature: {inputs['featureName']}

Project context:
{context}

Output:
1. Title
2. User Story ("As a...")
3. Acceptance Criteria (Given/When/Then format)
4. Definition of Done
5. Tags
6. Estimated story points (1‚Äì13)
""".strip()

# Natural (casual) prompt style
def generate_user_story(raw_input, context):
    return f"""
You are an Agile expert. Given this background:

{context}

Please turn this raw input into a complete user story (title, story, AC, DoD, points):

'{raw_input}'
"""

6. Main Logic Using Toggles
from config import config

# Choose context
if config["context_source"] == "static":
    context = static_context
else:
    context = read_context_from_file("sample_context.txt")

# Choose prompt style
if config["prompt_style"] == "structured":
    prompt = construct_story_prompt(user_inputs, context)
else:
    prompt = generate_user_story(raw_input, context)

# Print to see results (simulate what would be sent to GPT)
print("üìù Final Prompt:\n")
print(prompt)


Example Output
with
config = {
    "prompt_style": "structured",
    "context_source": "static"
}

You'll get:
üìù Final Prompt:

You are a senior CRL Product Owner.

Write a user story based on:
- Role: Study Director
- Goal: lock a document
- Benefit: ensure data integrity
- Feature: Document Locking

Project context:
The Study Director uses the Document Center and eSign Workflow.
Their priorities include traceability and compliance. Actions must be audit-logged.

Output:
1. Title
2. User Story ("As a...")
...









# üìù Final Prompt Generated by Config Toggle Script

You are a senior CRL Product Owner.

Write a user story based on:
- Role: Study Director
- Goal: lock a document
- Benefit: ensure data integrity
- Feature: Document Locking

Project context:

The Study Director uses the Document Center and eSign Workflow.
Their priorities include traceability and compliance. Actions must be audit-logged.


Output:
1. Title
2. User Story ("As a...")
3. Acceptance Criteria (Given/When/Then format)
4. Definition of Done
5. Tags
6. Estimated story points (1‚Äì13)